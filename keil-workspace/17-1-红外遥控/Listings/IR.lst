C51 COMPILER V9.54   IR                                                                    11/19/2024 16:39:51 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE IR
OBJECT MODULE PLACED IN .\Objects\IR.obj
COMPILER INVOKED BY: D:\software\Keil\C51\BIN\C51.EXE IR.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\
                    -IR.lst) TABS(2) OBJECT(.\Objects\IR.obj)

line level    source

   1          #include <REGX52.H>
   2          #include "Int0.h"
   3          #include "Timer0.h"
   4          #include "LCD1602.h"
   5          
   6          unsigned int IR_time;
   7          unsigned char IR_state;
   8          
   9          unsigned char IR_data[4];
  10          unsigned char IR_dataIndex;
  11          
  12          unsigned char IR_dataFlag;
  13          unsigned char IR_repeatFlag;
  14          unsigned char IR_address;
  15          unsigned char IR_command;
  16          
  17          void IR_init()
  18          {
  19   1        // 初始化定时器0
  20   1        Timer0_init();
  21   1        // 初始化外部中断
  22   1        Int0_init();
  23   1      }
  24          
  25          /**
  26            * @brief  红外遥控获取收到数据帧标志位
  27            * @param  无
  28            * @retval 是否收到数据帧，1为收到，0为未收到
  29            */
  30          unsigned char IR_getDataFlag(void)
  31          {
  32   1        if (IR_dataFlag) 
  33   1        {
  34   2          IR_dataFlag = 0;
  35   2          return 1;
  36   2        }
  37   1        return 0;
  38   1      }
  39          
  40          /**
  41            * @brief  红外遥控获取收到连发帧标志位
  42            * @param  无
  43            * @retval 是否收到连发帧，1为收到，0为未收到
  44            */
  45          unsigned char IR_getRepeatFlag(void)
  46          {
  47   1        if (IR_repeatFlag) 
  48   1        {
  49   2          IR_repeatFlag = 0;
  50   2          return 1;
  51   2        }
  52   1        return 0;
  53   1      }
  54          
C51 COMPILER V9.54   IR                                                                    11/19/2024 16:39:51 PAGE 2   

  55          unsigned char IR_getAddress(void)
  56          {
  57   1        return IR_address;
  58   1      }
  59          
  60          unsigned char IR_getCommand(void)
  61          {
  62   1        return IR_command;
  63   1      }
  64          
  65          // //外部中断0中断函数，下降沿触发执行
  66          void Int0_Routine(void) interrupt 0
  67          {
  68   1        if (IR_state == 0)        // 状态0，空闲状态
  69   1        {
  70   2          Timer0_setCounter(0);   // 定时计数器清0
  71   2          Timer0_run(1);          // 定时器启动
  72   2          IR_state = 1;           // 状态置为1
  73   2        }
  74   1        else if (IR_state == 1)   // 状态1，等待start信号或repeat信号
  75   1        {
  76   2          IR_time = Timer0_getCounter();  // 获取上一次中断到此次中断的时间
  77   2          Timer0_setCounter(0);           // 定时计数器清0
  78   2          
  79   2          // 如果计时为13.5ms，则接收到了Start信号（判定值在12MHz晶振下为13500，在11.0592M
             -Hz晶振下为12442）
  80   2          if (IR_time > 12442-500 && IR_time < 12442+500)
  81   2          {
  82   3            IR_state = 2;         // 状态置为2
  83   3          }
  84   2          // 如果计时为11.25ms，则接收到了Repeat信号（判定值在12MHz晶振下为11250，在11.059
             -2MHz晶振下为10368）
  85   2          else if (IR_time > 10368-500 && IR_time < 10368+500)
  86   2          {
  87   3            IR_repeatFlag = 1;    // 重复发送标志 置为1;
  88   3            Timer0_run(0);        // 定时器停止
  89   3            IR_state = 0;         // 状态置为0
  90   3          }
  91   2          else                    // 其他情况（没有出现上面两种情况）
  92   2          {
  93   3            IR_state = 1;         // 状态置为0
  94   3          }
  95   2        }
  96   1        else if (IR_state == 2)   // 状态2，接收数据， 一共4个字节的数据
  97   1        {
  98   2          IR_time = Timer0_getCounter();  // 获取上一次中断到此次中断的时间
  99   2          Timer0_setCounter(0);           // 定时计数器清0
 100   2          // 如果计时为1120us，则接收到了数据0（判定值在12MHz晶振下为1120，在11.0592MHz晶
             -振下为1032）
 101   2          if (IR_time > 1032-500 && IR_time < 1032+500)
 102   2          {
 103   3            IR_data[IR_dataIndex/8] &= ~(0x01<<(IR_dataIndex%8));   // 对应位置设置为0
 104   3            IR_dataIndex++;
 105   3          }
 106   2          // 如果计时为2250us，则接收到了数据1（判定值在12MHz晶振下为2250，在11.0592MHz晶
             -振下为2074）
 107   2          else if(IR_time > 2074-500 && IR_time < 2074+500)
 108   2          {
 109   3            IR_data[IR_dataIndex/8] |= (0x01<<(IR_dataIndex%8));    // 对应位置设置为1
 110   3            IR_dataIndex++;
 111   3          }
 112   2          else                    // 其他情况（没有出现上面两种情况） 接收出错
C51 COMPILER V9.54   IR                                                                    11/19/2024 16:39:51 PAGE 3   

 113   2          {
 114   3            IR_dataIndex = 0;     // 数据位置指针清0
 115   3            IR_state = 1;         // 状态置为1
 116   3          }
 117   2          
 118   2          
 119   2          if (IR_dataIndex >= 32) //如果接收到了32位数据
 120   2          {
 121   3            
 122   3            IR_dataIndex = 0;
 123   3            if ((IR_data[0] == ~IR_data[1]) && (IR_data[2] == ~IR_data[3])) // 进行数据验证
 124   3            {
 125   4              IR_address = IR_data[0];  //存储数据
 126   4              IR_command = IR_data[2];
 127   4              IR_dataFlag = 1;          //设置数据标志位为1，表示拿到数据
 128   4            }
 129   3            Timer0_run(0);        // 定时器停止
 130   3            IR_state = 0;         // 状态置为0
 131   3          }
 132   2        }
 133   1      }
 134          
 135          
 136          
 137          
 138          
 139          
 140          
 141          
 142          
 143          
 144          
 145          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    370    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     12    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
