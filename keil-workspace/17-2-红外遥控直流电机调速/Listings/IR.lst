C51 COMPILER V9.54   IR                                                                    11/19/2024 17:08:19 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE IR
OBJECT MODULE PLACED IN .\Objects\IR.obj
COMPILER INVOKED BY: D:\software\Keil\C51\BIN\C51.EXE IR.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\
                    -IR.lst) TABS(2) OBJECT(.\Objects\IR.obj)

line level    source

   1          #include <REGX52.H>
   2          #include "Int0.h"
   3          #include "Timer0.h"
   4          
   5          unsigned int IR_time;
   6          unsigned char IR_state;
   7          
   8          unsigned char IR_data[4];
   9          unsigned char IR_dataIndex;
  10          
  11          unsigned char IR_dataFlag;
  12          unsigned char IR_repeatFlag;
  13          unsigned char IR_address;
  14          unsigned char IR_command;
  15          
  16          void IR_init()
  17          {
  18   1        // 初始化定时器0
  19   1        Timer0_init();
  20   1        // 初始化外部中断
  21   1        Int0_init();
  22   1      }
  23          
  24          /**
  25            * @brief  红外遥控获取收到数据帧标志位
  26            * @param  无
  27            * @retval 是否收到数据帧，1为收到，0为未收到
  28            */
  29          unsigned char IR_getDataFlag(void)
  30          {
  31   1        if (IR_dataFlag) 
  32   1        {
  33   2          IR_dataFlag = 0;
  34   2          return 1;
  35   2        }
  36   1        return 0;
  37   1      }
  38          
  39          /**
  40            * @brief  红外遥控获取收到连发帧标志位
  41            * @param  无
  42            * @retval 是否收到连发帧，1为收到，0为未收到
  43            */
  44          unsigned char IR_getRepeatFlag(void)
  45          {
  46   1        if (IR_repeatFlag) 
  47   1        {
  48   2          IR_repeatFlag = 0;
  49   2          return 1;
  50   2        }
  51   1        return 0;
  52   1      }
  53          
  54          unsigned char IR_getAddress(void)
C51 COMPILER V9.54   IR                                                                    11/19/2024 17:08:19 PAGE 2   

  55          {
  56   1        return IR_address;
  57   1      }
  58          
  59          unsigned char IR_getCommand(void)
  60          {
  61   1        return IR_command;
  62   1      }
  63          
  64          // //外部中断0中断函数，下降沿触发执行
  65          void Int0_Routine(void) interrupt 0
  66          {
  67   1        if (IR_state == 0)        // 状态0，空闲状态
  68   1        {
  69   2          Timer0_setCounter(0);   // 定时计数器清0
  70   2          Timer0_run(1);          // 定时器启动
  71   2          IR_state = 1;           // 状态置为1
  72   2        }
  73   1        else if (IR_state == 1)   // 状态1，等待start信号或repeat信号
  74   1        {
  75   2          IR_time = Timer0_getCounter();  // 获取上一次中断到此次中断的时间
  76   2          Timer0_setCounter(0);           // 定时计数器清0
  77   2          
  78   2          // 如果计时为13.5ms，则接收到了Start信号（判定值在12MHz晶振下为13500，在11.0592M
             -Hz晶振下为12442）
  79   2          if (IR_time > 12442-500 && IR_time < 12442+500)
  80   2          {
  81   3            IR_state = 2;         // 状态置为2
  82   3          }
  83   2          // 如果计时为11.25ms，则接收到了Repeat信号（判定值在12MHz晶振下为11250，在11.059
             -2MHz晶振下为10368）
  84   2          else if (IR_time > 10368-500 && IR_time < 10368+500)
  85   2          {
  86   3            IR_repeatFlag = 1;    // 重复发送标志 置为1;
  87   3            Timer0_run(0);        // 定时器停止
  88   3            IR_state = 0;         // 状态置为0
  89   3          }
  90   2          else                    // 其他情况（没有出现上面两种情况）
  91   2          {
  92   3            IR_state = 1;         // 状态置为0
  93   3          }
  94   2        }
  95   1        else if (IR_state == 2)   // 状态2，接收数据， 一共4个字节的数据
  96   1        {
  97   2          IR_time = Timer0_getCounter();  // 获取上一次中断到此次中断的时间
  98   2          Timer0_setCounter(0);           // 定时计数器清0
  99   2          // 如果计时为1120us，则接收到了数据0（判定值在12MHz晶振下为1120，在11.0592MHz晶
             -振下为1032）
 100   2          if (IR_time > 1032-500 && IR_time < 1032+500)
 101   2          {
 102   3            IR_data[IR_dataIndex/8] &= ~(0x01<<(IR_dataIndex%8));   // 对应位置设置为0
 103   3            IR_dataIndex++;
 104   3          }
 105   2          // 如果计时为2250us，则接收到了数据1（判定值在12MHz晶振下为2250，在11.0592MHz晶
             -振下为2074）
 106   2          else if(IR_time > 2074-500 && IR_time < 2074+500)
 107   2          {
 108   3            IR_data[IR_dataIndex/8] |= (0x01<<(IR_dataIndex%8));    // 对应位置设置为1
 109   3            IR_dataIndex++;
 110   3          }
 111   2          else                    // 其他情况（没有出现上面两种情况） 接收出错
 112   2          {
C51 COMPILER V9.54   IR                                                                    11/19/2024 17:08:19 PAGE 3   

 113   3            IR_dataIndex = 0;     // 数据位置指针清0
 114   3            IR_state = 1;         // 状态置为1
 115   3          }
 116   2          
 117   2          
 118   2          if (IR_dataIndex >= 32) //如果接收到了32位数据
 119   2          {
 120   3            
 121   3            IR_dataIndex = 0;
 122   3            if ((IR_data[0] == ~IR_data[1]) && (IR_data[2] == ~IR_data[3])) // 进行数据验证
 123   3            {
 124   4              IR_address = IR_data[0];  //存储数据
 125   4              IR_command = IR_data[2];
 126   4              IR_dataFlag = 1;          //设置数据标志位为1，表示拿到数据
 127   4            }
 128   3            Timer0_run(0);        // 定时器停止
 129   3            IR_state = 0;         // 状态置为0
 130   3          }
 131   2        }
 132   1      }
 133          
 134          
 135          
 136          
 137          
 138          
 139          
 140          
 141          
 142          
 143          
 144          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    370    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     12    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
